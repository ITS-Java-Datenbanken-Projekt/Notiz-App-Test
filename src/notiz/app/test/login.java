/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package notiz.app.test;
import java.sql.*;
import javax.swing.JOptionPane;
/**
 *
 * @author Moritz
 */
public class login extends javax.swing.JFrame {

    /**
     * Creates new form login
     */
    
    private DatabaseConnection konnektor;
    public user currentuser;
    public ResultSet result;
    
    /**
    private boolean checkPasswordMatch(){        
        String password1 = new String(pwfPW.getPassword());
        String password2 = new String(pwfPWconfirm.getPassword());
        if (password1.equals(password2)) {
            return true;
        } else {
            return false;
        }
    }
    */  
    
    public void update(){
        
        String pwvm = valPW(pwfPW.getPassword(),pwfPWconfirm.getPassword());
        LStatus.setText(pwvm);
        if(!valUser(tfUsername.getText())){
            LStatus.setText("username darf nicht leer sein");
        }
    }
    
    public static boolean valUser(String username) {
        return username != null && !username.trim().isEmpty();
    }
    
    public String valPW(char[] password, char[] confirmPassword){
        String passwordStr = new String(password);
        String confirmPasswordStr = new String(confirmPassword);
        
        if (!passwordStr.equals(confirmPasswordStr)) {
            return "Die Passwörter stimmen nicht überein.";
        }
        
        if (passwordStr.length() < 8) {
            return "Das Passwort muss mindestens 8 Zeichen lang sein.";
        }
        
        boolean hasLetter = false;
        boolean hasDigit = false;
        
        for (char ch : password) {
            if (Character.isLetter(ch)) {
                hasLetter = true;
            }
            if (Character.isDigit(ch)) {
                hasDigit = true;
            }
        }

        if (!hasLetter) {
            return "Das Passwort muss mindestens einen Buchstaben enthalten.";
        }

        if (!hasDigit) {
            return "Das Passwort muss mindestens eine Zahl enthalten.";
        }

        return "Das Passwort ist gültig.";
    }
    
    public login() {
        try {
            initComponents();
            
            this.konnektor = new DatabaseConnection("localhost", "notizapp", "root", "");
            this.konnektor.open();

        } catch (ClassNotFoundException | SQLException ex) {
            JOptionPane.showMessageDialog(rootPane, "Fehler! Verbindung konnte nicht aufgebaut werden: " + ex);
        }
    }
    
    public boolean getUser(String user){
        try {
            ResultSet ergebnis = this.konnektor.fuehreAbfrageAus("SELECT Benutzername, Anzeigename, Password FROM user WHERE Benutzername = '"+ user+ "' AND Password = '"+ pwField.getText() + "'");
            if(ergebnis.next()) {
                currentuser = new user(ergebnis.getString("Benutzername"), ergebnis.getString("Anzeigename"), ergebnis.getString("Password"));
                System.out.println(currentuser);
                System.out.println(currentuser.getName());
                System.out.println(currentuser.getUsername());
                return true;
            }
        

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(rootPane, "Fehler bei der Abfrage der Datenbank: " + ex);
            
        }
        return false;
    }
    
    public boolean checkUser(String username){
        
        try {
            result = this.konnektor.fuehreAbfrageAus("SELECT Benutzername, Anzeigename, Password FROM user WHERE Benutzername = '"+ username+ "'");
            if(result.next()) { 
                if(result.getString("Benutzername").equals(username)){
                    return true;
                }
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(rootPane, "Fehler bei der Abfrage der Datenbank: " + ex);    
        }
        return false;
    }
       

    
     

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        PCreateAccount = new javax.swing.JDialog();
        btnPCAconfirm = new javax.swing.JButton();
        btnPCAcancel = new javax.swing.JButton();
        pwfPW = new javax.swing.JPasswordField();
        showPasswordChk1 = new javax.swing.JCheckBox();
        pwfPWconfirm = new javax.swing.JPasswordField();
        LStatus = new javax.swing.JLabel();
        Lpw = new javax.swing.JLabel();
        Lconfirmpw = new javax.swing.JLabel();
        tfUsername = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        tfName = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        PCreateAccountUser = new javax.swing.JDialog();
        jLabel2 = new javax.swing.JLabel();
        btnCreateAccountUserOK = new javax.swing.JButton();
        loginBtn = new javax.swing.JButton();
        cancelBtn = new javax.swing.JButton();
        pwField = new javax.swing.JPasswordField();
        showPasswordChk = new javax.swing.JCheckBox();
        userTf = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();

        PCreateAccount.setAlwaysOnTop(true);
        PCreateAccount.setFocusCycleRoot(false);
        PCreateAccount.setSize(new java.awt.Dimension(350, 280));
        PCreateAccount.setType(java.awt.Window.Type.POPUP);

        btnPCAconfirm.setText("confirm");
        btnPCAconfirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPCAconfirmActionPerformed(evt);
            }
        });

        btnPCAcancel.setText("cancel");
        btnPCAcancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPCAcancelActionPerformed(evt);
            }
        });

        pwfPW.setToolTipText("");
        pwfPW.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                pwfPWCaretUpdate(evt);
            }
        });
        pwfPW.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                pwfPWFocusLost(evt);
            }
        });
        pwfPW.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                pwfPWInputMethodTextChanged(evt);
            }
        });
        pwfPW.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pwfPWActionPerformed(evt);
            }
        });

        showPasswordChk1.setContentAreaFilled(false);
        showPasswordChk1.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/notiz/app/test/source/pwshown.png"))); // NOI18N
        showPasswordChk1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showPasswordChk1ActionPerformed(evt);
            }
        });

        pwfPWconfirm.setToolTipText("");
        pwfPWconfirm.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                pwfPWconfirmCaretUpdate(evt);
            }
        });
        pwfPWconfirm.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                pwfPWconfirmFocusLost(evt);
            }
        });

        Lpw.setText("Password");

        Lconfirmpw.setText("confirm Password");

        tfUsername.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        tfUsername.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                tfUsernameCaretUpdate(evt);
            }
        });

        jLabel3.setText("Username");

        jLabel4.setText("(Vor -und Nach) Name");

        javax.swing.GroupLayout PCreateAccountLayout = new javax.swing.GroupLayout(PCreateAccount.getContentPane());
        PCreateAccount.getContentPane().setLayout(PCreateAccountLayout);
        PCreateAccountLayout.setHorizontalGroup(
            PCreateAccountLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PCreateAccountLayout.createSequentialGroup()
                .addGroup(PCreateAccountLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PCreateAccountLayout.createSequentialGroup()
                        .addGap(119, 119, 119)
                        .addComponent(btnPCAconfirm)
                        .addGap(18, 18, 18)
                        .addComponent(btnPCAcancel))
                    .addGroup(PCreateAccountLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(PCreateAccountLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3)
                            .addComponent(Lconfirmpw)
                            .addComponent(Lpw)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(PCreateAccountLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(tfName, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tfUsername, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(pwfPWconfirm, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(LStatus, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 215, Short.MAX_VALUE)
                            .addComponent(pwfPW, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(18, 18, 18)
                        .addComponent(showPasswordChk1)))
                .addContainerGap(26, Short.MAX_VALUE))
        );
        PCreateAccountLayout.setVerticalGroup(
            PCreateAccountLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PCreateAccountLayout.createSequentialGroup()
                .addGap(76, 76, 76)
                .addGroup(PCreateAccountLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(PCreateAccountLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(tfUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(PCreateAccountLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pwfPW, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Lpw))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(PCreateAccountLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PCreateAccountLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(pwfPWconfirm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(Lconfirmpw))
                    .addComponent(showPasswordChk1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(LStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                .addGroup(PCreateAccountLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnPCAconfirm)
                    .addComponent(btnPCAcancel))
                .addGap(0, 59, Short.MAX_VALUE))
        );

        jLabel2.setText("this username is already taken");

        btnCreateAccountUserOK.setText("OK");
        btnCreateAccountUserOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateAccountUserOKActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout PCreateAccountUserLayout = new javax.swing.GroupLayout(PCreateAccountUser.getContentPane());
        PCreateAccountUser.getContentPane().setLayout(PCreateAccountUserLayout);
        PCreateAccountUserLayout.setHorizontalGroup(
            PCreateAccountUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PCreateAccountUserLayout.createSequentialGroup()
                .addGroup(PCreateAccountUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PCreateAccountUserLayout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addComponent(btnCreateAccountUserOK))
                    .addGroup(PCreateAccountUserLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        PCreateAccountUserLayout.setVerticalGroup(
            PCreateAccountUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PCreateAccountUserLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCreateAccountUserOK)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        loginBtn.setText("login");
        loginBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginBtnActionPerformed(evt);
            }
        });

        cancelBtn.setText("cancel");
        cancelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelBtnActionPerformed(evt);
            }
        });

        pwField.setToolTipText("");

        showPasswordChk.setText("show Password");
        showPasswordChk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showPasswordChkActionPerformed(evt);
            }
        });

        jLabel1.setText("account erstellen");
        jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel1MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(userTf, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 147, Short.MAX_VALUE)
                            .addComponent(pwField, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(18, 18, 18)
                        .addComponent(showPasswordChk))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(loginBtn)
                        .addGap(18, 18, 18)
                        .addComponent(cancelBtn)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(147, Short.MAX_VALUE)
                .addComponent(userTf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pwField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(showPasswordChk))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(loginBtn)
                    .addComponent(cancelBtn)
                    .addComponent(jLabel1))
                .addGap(39, 39, 39))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void showPasswordChkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showPasswordChkActionPerformed
        if(showPasswordChk.isSelected()){
            pwField.setEchoChar('\u0000');
        }
        else if (!showPasswordChk.isSelected()){
            pwField.setEchoChar('\u2022');
        }
    }//GEN-LAST:event_showPasswordChkActionPerformed

    private void loginBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginBtnActionPerformed

        if (getUser(userTf.getText())){
            GUI gui = new GUI();
            gui.setVisible(true);
            dispose();            
        }

        
    }//GEN-LAST:event_loginBtnActionPerformed

    private void cancelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelBtnActionPerformed
        System.exit(0);
    }//GEN-LAST:event_cancelBtnActionPerformed

    private void jLabel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseClicked
        PCreateAccount.show();
    }//GEN-LAST:event_jLabel1MouseClicked

    private void tfUsernameCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_tfUsernameCaretUpdate
        update();
    }//GEN-LAST:event_tfUsernameCaretUpdate

    private void pwfPWconfirmFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_pwfPWconfirmFocusLost

    }//GEN-LAST:event_pwfPWconfirmFocusLost

    private void pwfPWconfirmCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_pwfPWconfirmCaretUpdate
        update();
    }//GEN-LAST:event_pwfPWconfirmCaretUpdate

    private void showPasswordChk1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showPasswordChk1ActionPerformed
        if(showPasswordChk1.isSelected()){
            pwfPW.setEchoChar('\u0000');
            pwfPWconfirm.setEchoChar('\u0000');
        }
        else if (!showPasswordChk.isSelected()){
            pwfPW.setEchoChar('\u2022');
            pwfPWconfirm.setEchoChar('\u2022');
        }
    }//GEN-LAST:event_showPasswordChk1ActionPerformed

    private void btnPCAcancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPCAcancelActionPerformed
        PCreateAccount.dispose();
    }//GEN-LAST:event_btnPCAcancelActionPerformed

    private void btnPCAconfirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPCAconfirmActionPerformed
        String pwvm = valPW(pwfPW.getPassword(),pwfPWconfirm.getPassword());
        String username = tfUsername.getText();
        if(pwvm.equals("Das Passwort ist gültig.") && valUser(username)){
            if(checkUser(tfUsername.getText())){
                update();
            }
            else{
                try{
                    int ergebnis = this.konnektor.fuehreUpdateAus("INSERT INTO `user` (`Benutzername`, `Password`, `Anzeigename`) VALUES ('"+tfUsername.getText()+"', '"+pwfPW.getText()+"', '"+tfName.getText()+"');");
                    System.out.println(ergebnis);
                    PCreateAccount.dispose();
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(rootPane, "Fehler bei der Abfrage der Datenbank: " + ex);
                }
            }

        }
        else{

        }

        //push username and password to database
    }//GEN-LAST:event_btnPCAconfirmActionPerformed

    private void pwfPWActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pwfPWActionPerformed

    }//GEN-LAST:event_pwfPWActionPerformed

    private void pwfPWInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_pwfPWInputMethodTextChanged

    }//GEN-LAST:event_pwfPWInputMethodTextChanged

    private void pwfPWFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_pwfPWFocusLost

    }//GEN-LAST:event_pwfPWFocusLost

    private void pwfPWCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_pwfPWCaretUpdate
        update();
    }//GEN-LAST:event_pwfPWCaretUpdate

    private void btnCreateAccountUserOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateAccountUserOKActionPerformed
        PCreateAccountUser.dispose();
    }//GEN-LAST:event_btnCreateAccountUserOKActionPerformed


    
    
  






    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new login().setVisible(true);
            }
        });
        
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel LStatus;
    private javax.swing.JLabel Lconfirmpw;
    private javax.swing.JLabel Lpw;
    private javax.swing.JDialog PCreateAccount;
    private javax.swing.JDialog PCreateAccountUser;
    private javax.swing.JButton btnCreateAccountUserOK;
    private javax.swing.JButton btnPCAcancel;
    private javax.swing.JButton btnPCAconfirm;
    private javax.swing.JButton cancelBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JButton loginBtn;
    private javax.swing.JPasswordField pwField;
    private javax.swing.JPasswordField pwfPW;
    private javax.swing.JPasswordField pwfPWconfirm;
    private javax.swing.JCheckBox showPasswordChk;
    private javax.swing.JCheckBox showPasswordChk1;
    private javax.swing.JTextField tfName;
    private javax.swing.JTextField tfUsername;
    private javax.swing.JTextField userTf;
    // End of variables declaration//GEN-END:variables
}
